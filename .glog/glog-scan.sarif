{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "02994616-8f63-3ed7-a082-3737fc942c0a",
              "name": "resources.rules.detected-ssh-password",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.detected-ssh-password"
              },
              "fullDescription": {
                "text": "SSH Password detected"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "SSH Password detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "SSH Password detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.detected-ssh-password"
                ]
              }
            },
            {
              "id": "32c2046d-e80c-3287-afd9-4bc14c7251f7",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "ca51a855-3c83-3e66-ba88-37f6bfc433f6",
              "name": "resources.rules.detected-ssh-password",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.detected-ssh-password"
              },
              "fullDescription": {
                "text": "SSH Password detected"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "SSH Password detected\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "SSH Password detected\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.detected-ssh-password"
                ]
              }
            },
            {
              "id": "86caaed8-1c62-38d9-ac88-b385d8db7473",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "88b7441d-9585-3026-ab49-905a71cf5dd0",
              "name": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query"
              },
              "fullDescription": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "help": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected possible formatted SQL query. Use parameterized queries instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query)\n - [https://stackoverflow.com/questions/775296/mysql-parameterized-queries](https://stackoverflow.com/questions/775296/mysql-parameterized-queries)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.formatted-sql-query.formatted-sql-query"
                ]
              }
            },
            {
              "id": "5f147ec9-4439-3125-a3a9-9aae64855da6",
              "name": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query"
              },
              "fullDescription": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "help": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected possible formatted SQL query. Use parameterized queries instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query)\n - [https://stackoverflow.com/questions/775296/mysql-parameterized-queries](https://stackoverflow.com/questions/775296/mysql-parameterized-queries)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.formatted-sql-query.formatted-sql-query"
                ]
              }
            },
            {
              "id": "44b1b339-c1ad-3ed9-b3a7-d32a380144b5",
              "name": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query"
              },
              "fullDescription": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "help": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected possible formatted SQL query. Use parameterized queries instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query)\n - [https://stackoverflow.com/questions/775296/mysql-parameterized-queries](https://stackoverflow.com/questions/775296/mysql-parameterized-queries)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.formatted-sql-query.formatted-sql-query"
                ]
              }
            },
            {
              "id": "d4f3855b-a455-36dc-9180-11baa02ed7c4",
              "name": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query"
              },
              "fullDescription": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "help": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected possible formatted SQL query. Use parameterized queries instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query)\n - [https://stackoverflow.com/questions/775296/mysql-parameterized-queries](https://stackoverflow.com/questions/775296/mysql-parameterized-queries)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.formatted-sql-query.formatted-sql-query"
                ]
              }
            },
            {
              "id": "4e21be9e-40c7-3ff8-97c4-56ca3cb4dd80",
              "name": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query"
              },
              "fullDescription": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "help": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected possible formatted SQL query. Use parameterized queries instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query)\n - [https://stackoverflow.com/questions/775296/mysql-parameterized-queries](https://stackoverflow.com/questions/775296/mysql-parameterized-queries)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.formatted-sql-query.formatted-sql-query"
                ]
              }
            },
            {
              "id": "64bb4d88-3207-342a-97c5-fe55118d8692",
              "name": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query"
              },
              "fullDescription": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "help": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected possible formatted SQL query. Use parameterized queries instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query)\n - [https://stackoverflow.com/questions/775296/mysql-parameterized-queries](https://stackoverflow.com/questions/775296/mysql-parameterized-queries)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.formatted-sql-query.formatted-sql-query"
                ]
              }
            },
            {
              "id": "180b8146-af5a-3e07-8efd-05cf287b3b29",
              "name": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query"
              },
              "fullDescription": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "help": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected possible formatted SQL query. Use parameterized queries instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query)\n - [https://stackoverflow.com/questions/775296/mysql-parameterized-queries](https://stackoverflow.com/questions/775296/mysql-parameterized-queries)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.formatted-sql-query.formatted-sql-query"
                ]
              }
            },
            {
              "id": "6e70a3e8-fac5-3c21-b377-4656be2e0f3c",
              "name": "python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.formatted-sql-query.formatted-sql-query"
              },
              "fullDescription": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query",
              "help": {
                "text": "Detected possible formatted SQL query. Use parameterized queries instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected possible formatted SQL query. Use parameterized queries instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query)\n - [https://stackoverflow.com/questions/775296/mysql-parameterized-queries](https://stackoverflow.com/questions/775296/mysql-parameterized-queries)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.formatted-sql-query.formatted-sql-query"
                ]
              }
            },
            {
              "id": "88dd386b-11ac-3388-96c2-596e5f0c01ba",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "5ea1d124-0b6d-314b-9fb0-c7d626975cd5",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "226511f9-17c0-3382-a17c-31ea6f7390d1",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "9bd14bdd-eb56-3319-924f-49b8cf371221",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "8cb450e5-f9b5-35c7-9903-49b1451a94c3",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "52b2d43e-6b6c-319f-82d7-df37958c1ae2",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "d31fe5b1-dba4-3504-92dd-df7375f998c9",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "94d74b31-b2ac-32a4-be8c-99dfab9cdf24",
              "name": "resources.rules.unquoted-csv-writer",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.unquoted-csv-writer"
              },
              "fullDescription": {
                "text": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://affinity-it-security.com/how-to-prevent-csv-injection/](https://affinity-it-security.com/how-to-prevent-csv-injection/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.unquoted-csv-writer"
                ]
              }
            },
            {
              "id": "367b786f-bab3-3c86-ac56-98e0f5df7d92",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "b64483c9-242f-3ef5-8dca-489d165d509d",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "746b342e-b76d-38a4-9d64-2a8d3479fbbb",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "47096f50-f442-3c8b-9c0a-a32efb25d6c0",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "39e852e4-46c9-3a29-84fa-045bdd3024c7",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "9a04cb3a-9131-3c83-bb64-f023a07b8a2c",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "1f301fc1-ddc1-34ae-9bbe-20c434102ca9",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "34556df0-b24c-344b-87de-7351b40cc3b6",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "1daf892d-80a2-322f-b1a5-3d7017c5e19a",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "c54d7fab-7202-30cc-b79f-3c2e15550e9c",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "02994616-8f63-3ed7-a082-3737fc942c0a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "SSH Password detected"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/core/dataprovider.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 23,
                  "endLine": 336,
                  "endColumn": 105,
                  "snippet": {
                    "text": "                echo 'sshpass -p {password} rsync --progress -avz -e \\\\\\\"ssh -p {port} \\\\\\\" \\\\\\\"\\$@\\\\\\\"' >> /tmp/ssh.sh"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b72a2c91fa847d57cb3802f6eb45e7d2bf8e15cad6b800f0e484e4796308245c0d5a2158d7a14ac53237dc4c75575f65d12df7ae420a137f59c99d5ae2f9e0e3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "32c2046d-e80c-3287-afd9-4bc14c7251f7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"\\d+\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/core/context.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 36,
                  "endLine": 335,
                  "endColumn": 69,
                  "snippet": {
                    "text": "                kfd_nodeids = [int(re.search(r\"\\d+\",line.split()[0]).group()) for line in kfd_properties]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a9fc6381b8fcc35f48f4757e47364d43b88b29404568e15436015449cb7bb405825307b8fdb339f5f9a8b38595458d04d3672d2ea6d38d1229e80a72f92bf499_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ca51a855-3c83-3e66-ba88-37f6bfc433f6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "SSH Password detected"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/core/dataprovider.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 23,
                  "endLine": 374,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                echo 'sshpass -p {password} ssh -v \\$*' >> /tmp/ssh.sh"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b72a2c91fa847d57cb3802f6eb45e7d2bf8e15cad6b800f0e484e4796308245c0d5a2158d7a14ac53237dc4c75575f65d12df7ae420a137f59c99d5ae2f9e0e3_1"
          },
          "properties": {}
        },
        {
          "ruleId": "86caaed8-1c62-38d9-ac88-b385d8db7473",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"\\n\\d+\\s+\\d+\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/core/context.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 24,
                  "endLine": 341,
                  "endColumn": 87,
                  "snippet": {
                    "text": "                rsmi = re.findall(r\"\\n\\d+\\s+\\d+\",self.console.sh(\"rocm-smi --showhw\"))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9baa648063af0c2e6392d5bd3f30af9e9060f75eba98d322f60c459c267311b4f87071115a113e840450dd5a15277d34f0422d3ee871336ed44888e304154994_0"
          },
          "properties": {}
        },
        {
          "ruleId": "88b7441d-9585-3026-ab49-905a71cf5dd0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected possible formatted SQL query. Use parameterized queries instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/db/database.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 9,
                  "endLine": 102,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        ENGINE.execute(\"Use {}\".format(db_name))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2bb2a949e4d14c9fc5e1aa7e73eb5aa3a5da195afff04571b927f1f924afa6497908aff81ac6e0a18eaee0b74465f7d588ef5b02fe33e97c380933a45df0c16f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5f147ec9-4439-3125-a3a9-9aae64855da6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected possible formatted SQL query. Use parameterized queries instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/db/database.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 9,
                  "endLine": 110,
                  "endColumn": 75,
                  "snippet": {
                    "text": "        ENGINE.execute(\"Create database if not exists {}\".format(db_name))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2bb2a949e4d14c9fc5e1aa7e73eb5aa3a5da195afff04571b927f1f924afa6497908aff81ac6e0a18eaee0b74465f7d588ef5b02fe33e97c380933a45df0c16f_1"
          },
          "properties": {}
        },
        {
          "ruleId": "44b1b339-c1ad-3ed9-b3a7-d32a380144b5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected possible formatted SQL query. Use parameterized queries instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/db/database.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 9,
                  "endLine": 129,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        ENGINE.execute(\"DROP DATABASE IF EXISTS {}\".format(db_name))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2bb2a949e4d14c9fc5e1aa7e73eb5aa3a5da195afff04571b927f1f924afa6497908aff81ac6e0a18eaee0b74465f7d588ef5b02fe33e97c380933a45df0c16f_3"
          },
          "properties": {}
        },
        {
          "ruleId": "d4f3855b-a455-36dc-9180-11baa02ed7c4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected possible formatted SQL query. Use parameterized queries instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/db/database.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 5,
                  "endLine": 114,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    ENGINE.execute(\"Use {}\".format(db_name))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2bb2a949e4d14c9fc5e1aa7e73eb5aa3a5da195afff04571b927f1f924afa6497908aff81ac6e0a18eaee0b74465f7d588ef5b02fe33e97c380933a45df0c16f_2"
          },
          "properties": {}
        },
        {
          "ruleId": "4e21be9e-40c7-3ff8-97c4-56ca3cb4dd80",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected possible formatted SQL query. Use parameterized queries instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/db/database.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 18,
                  "endLine": 150,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        result = ENGINE.execute(\n            \"SELECT * FROM {} \\\n                WHERE {}.created_date= \\\n                    (SELECT MAX(created_date) FROM {}) ;\".format(DB_TABLE.__tablename__)\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2bb2a949e4d14c9fc5e1aa7e73eb5aa3a5da195afff04571b927f1f924afa6497908aff81ac6e0a18eaee0b74465f7d588ef5b02fe33e97c380933a45df0c16f_4"
          },
          "properties": {}
        },
        {
          "ruleId": "64bb4d88-3207-342a-97c5-fe55118d8692",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected possible formatted SQL query. Use parameterized queries instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/db/database.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 5,
                  "endLine": 204,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    ENGINE.execute(\n        \"UPDATE {} \\\n        SET \\\n        {} = TRIM({});\".format(\n            DB_TABLE.__tablename__, col_name, col_name\n        )\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2bb2a949e4d14c9fc5e1aa7e73eb5aa3a5da195afff04571b927f1f924afa6497908aff81ac6e0a18eaee0b74465f7d588ef5b02fe33e97c380933a45df0c16f_5"
          },
          "properties": {}
        },
        {
          "ruleId": "180b8146-af5a-3e07-8efd-05cf287b3b29",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected possible formatted SQL query. Use parameterized queries instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/db/database_functions.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 24,
                  "endLine": 63,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    matching_entries = ENGINE.execute(\n        \"SELECT * FROM dlm_table \\\n        WHERE model='{}' \\\n        AND gpu_architecture='{}' \\\n        \".format(\n            recent_entry[\"model\"], \n            recent_entry[\"gpu_architecture\"]\n        )\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2d2d3061663ccd43d7c29ad825470cc416e8b0ee362eadd4edcb12dd2ea8e26cd2c61889ce50e417bd58e76e18cf94a6e8c86e84fbb02a6bb2a927e33fe0ae5c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6e70a3e8-fac5-3c21-b377-4656be2e0f3c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected possible formatted SQL query. Use parameterized queries instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/db/database.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 14,
                  "endLine": 226,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    result = ENGINE.execute(\n        \"SELECT `COLUMN_NAME` \\\n            FROM `INFORMATION_SCHEMA`.`COLUMNS` \\\n                WHERE `TABLE_SCHEMA`='{}' \\\n                AND `TABLE_NAME`='{}'\".format(db_name, DB_TABLE.__tablename__)\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2bb2a949e4d14c9fc5e1aa7e73eb5aa3a5da195afff04571b927f1f924afa6497908aff81ac6e0a18eaee0b74465f7d588ef5b02fe33e97c380933a45df0c16f_6"
          },
          "properties": {}
        },
        {
          "ruleId": "88dd386b-11ac-3388-96c2-596e5f0c01ba",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `p` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/scripts/common/tools/get_library_trace.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 19,
                  "endLine": 55,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    regexes = {p: re.compile(p) for p in patterns}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e9f7b10d682a5a12def3b443e616e65ab8af045c65a1f245710880f227afd23ecb9a24b860ac80657f224bebbb4790c65bd65ebf81f12f8d1b9e09d29a042013_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5ea1d124-0b6d-314b-9fb0-c7d626975cd5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/scripts/common/pre_scripts/rocEnvTool/rocenv_tool.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 9,
                  "endLine": 290,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        os.system(\"rm -rf \" + out_dir)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bb979b7abc500b8ed1bc74157e4a8fc3f71e7370989da8b6907c62f2bc8b072e44a6b16a0b45aea50abf2b96a96ccd6d865ac0c47009b8921bd41161c123c9a5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "226511f9-17c0-3382-a17c-31ea6f7390d1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `p` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/scripts/common/tools/get_library_trace.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 19,
                  "endLine": 89,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    regexes = {p: re.compile(p) for p in patterns}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e9f7b10d682a5a12def3b443e616e65ab8af045c65a1f245710880f227afd23ecb9a24b860ac80657f224bebbb4790c65bd65ebf81f12f8d1b9e09d29a042013_1"
          },
          "properties": {}
        },
        {
          "ruleId": "9bd14bdd-eb56-3319-924f-49b8cf371221",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"^Running kernel: (.*)$\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/scripts/common/tools/get_library_trace.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 16,
                  "endLine": 122,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    RE_MATCH = re.compile(r\"^Running kernel: (.*)$\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f3d086d7b2df4b352ab79ac4fe08918088655cfd57d33c04ea108d3cabda3ef8480246f20d2e2b07543133562dc38142fe5736f7ca79e19644081d5a05db88f6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8cb450e5-f9b5-35c7-9903-49b1451a94c3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"MIOpen\\(HIP\\): Command \\[.*\\] (./bin/MIOpenDriver .*)$\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/scripts/common/tools/get_library_trace.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 16,
                  "endLine": 156,
                  "endColumn": 85,
                  "snippet": {
                    "text": "    RE_MATCH = re.compile(r\"MIOpen\\(HIP\\): Command \\[.*\\] (./bin/MIOpenDriver .*)$\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5d2d744153736e79d13ee38eefac76b2aac93c450bb44cd26922fdaf3fe8ed7da56f05b8ce8bbfb9d820f9dad85102014c7b9604fcb75e2e444adbcd4157a6f8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "52b2d43e-6b6c-319f-82d7-df37958c1ae2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"([~ ]|^).*get_library_trace \"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/scripts/common/tools/get_library_trace.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 21,
                  "endLine": 292,
                  "endColumn": 78,
                  "snippet": {
                    "text": "    commandstring = re.sub(\"([~ ]|^).*get_library_trace \", \"\", commandstring)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4b5fbdd12b004b5a198ef90594c7a91daf70411c49853ca2dba8d6be7dcc5b2b8a4c02ed299881bd6b997c6b379c58f8f51997d94d99fd61a78086d11539013e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d31fe5b1-dba4-3504-92dd-df7375f998c9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/scripts/common/tools/gpu_info_profiler.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 9,
                  "endLine": 139,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bc9a0c1fe08eebc0f84c183d2b2c7af1ef0ef9e85641638221072768fceeb4f17a19957caf29047923091fdb65f5d34bc6cd067ccd312ea80f91b3a1c83310e3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "94d74b31-b2ac-32a4-be8c-99dfab9cdf24",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/scripts/common/tools/get_library_trace.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 21,
                  "endLine": 324,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        csvwriter = csv.writer(csvfile)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c35a060a6d23fd2e2aa8e137bebc9703ebb2181eaeae7703e175443870b24b9ada321fa2abfe43cc4e4eb8af6bc18e0cecf9399f5b4d589c32e4c1ebc3b942fd_0"
          },
          "properties": {}
        },
        {
          "ruleId": "367b786f-bab3-3c86-ac56-98e0f5df7d92",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/scripts/common/tools/gpu_info_profiler.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 9,
                  "endLine": 176,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        time.sleep(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bc9a0c1fe08eebc0f84c183d2b2c7af1ef0ef9e85641638221072768fceeb4f17a19957caf29047923091fdb65f5d34bc6cd067ccd312ea80f91b3a1c83310e3_1"
          },
          "properties": {}
        },
        {
          "ruleId": "b64483c9-242f-3ef5-8dca-489d165d509d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/scripts/common/tools/rocm_smi_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 21,
                  "endLine": 29,
                  "endColumn": 35,
                  "snippet": {
                    "text": "                    exit(ret_init)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "753b380cb4c5a6276dba628b6f67edf272aaee5cd31e15c7690d2ec25b4369ceaa87d09f1c961e68b8fffe08c95da30f3a870fda57f0f1a6f16c04f56cbe86c0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "746b342e-b76d-38a4-9d64-2a8d3479fbbb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/scripts/common/tools/rocm_smi_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 17,
                  "endLine": 32,
                  "endColumn": 24,
                  "snippet": {
                    "text": "                exit(0)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "753b380cb4c5a6276dba628b6f67edf272aaee5cd31e15c7690d2ec25b4369ceaa87d09f1c961e68b8fffe08c95da30f3a870fda57f0f1a6f16c04f56cbe86c0_1"
          },
          "properties": {}
        },
        {
          "ruleId": "47096f50-f442-3c8b-9c0a-a32efb25d6c0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/scripts/common/tools/rocm_smi_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 17,
                  "endLine": 63,
                  "endColumn": 26,
                  "snippet": {
                    "text": "                exit(ret)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "753b380cb4c5a6276dba628b6f67edf272aaee5cd31e15c7690d2ec25b4369ceaa87d09f1c961e68b8fffe08c95da30f3a870fda57f0f1a6f16c04f56cbe86c0_2"
          },
          "properties": {}
        },
        {
          "ruleId": "39e852e4-46c9-3a29-84fa-045bdd3024c7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'Popen' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/tools/create_table_db.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 19,
                  "endLine": 100,
                  "endColumn": 93,
                  "snippet": {
                    "text": "            ret = subprocess.Popen(cmd_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3e79f408619cbcd5f61a200786b6d111f7fcc3f5f59663fc6592f4063e5876432f928aded2070bb1098974276f652d4ce565734b577800a09c87b91c435a60db_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9a04cb3a-9131-3c83-bb64-f023a07b8a2c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `'.*:'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/tools/run_models.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 584,
                  "startColumn": 45,
                  "endLine": 584,
                  "endColumn": 80,
                  "snippet": {
                    "text": "            container_name = \"container_\" + re.sub('.*:','', image_docker_name) # remove docker container hub details"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6d06dae2fb11cb20151a968cdcb6f6a6126e84df890893fb1ef43a86b2b952366b95ab6853a777880167901b8b8d1b2d14c7dc62d1733b44ec6d2554fcc2d5f3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1f301fc1-ddc1-34ae-9bbe-20c434102ca9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'Popen' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/tools/create_table_db.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 19,
                  "endLine": 120,
                  "endColumn": 107,
                  "snippet": {
                    "text": "            ret = subprocess.Popen(cmd_list, env=env_vars, stdout=subprocess.PIPE, stderr=subprocess.PIPE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3e79f408619cbcd5f61a200786b6d111f7fcc3f5f59663fc6592f4063e5876432f928aded2070bb1098974276f652d4ce565734b577800a09c87b91c435a60db_1"
          },
          "properties": {}
        },
        {
          "ruleId": "34556df0-b24c-344b-87de-7351b40cc3b6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `special_char` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/tools/run_models.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 741,
                  "startColumn": 20,
                  "endLine": 741,
                  "endColumn": 54,
                  "snippet": {
                    "text": "                if re.search(special_char, model_dir) is not None:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2ca0763aecddef1c9526e56794c8e6411ffd10c4c02b64fb0d62ded504008f965bbb6e1000f0238dbba0400b803a1f129b55a72e7da0b5bc82f77c512ed3f86c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1daf892d-80a2-322f-b1a5-3d7017c5e19a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'Popen' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/tools/update_table_db.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 19,
                  "endLine": 102,
                  "endColumn": 93,
                  "snippet": {
                    "text": "            ret = subprocess.Popen(cmd_list, stdout=subprocess.PIPE, stderr=subprocess.PIPE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5d1a4f06b2eeb7a3b635fe081562ac1967dad3b194b1cb198613f843102f88deef087f5192368c0c8d4f4abf7fc5177548fddf0f6a6a8a7973eca096aed87209_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c54d7fab-7202-30cc-b79f-3c2e15550e9c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'Popen' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/madengine/tools/update_table_db.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 19,
                  "endLine": 120,
                  "endColumn": 107,
                  "snippet": {
                    "text": "            ret = subprocess.Popen(cmd_list, env=env_vars, stdout=subprocess.PIPE, stderr=subprocess.PIPE)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5d1a4f06b2eeb7a3b635fe081562ac1967dad3b194b1cb198613f843102f88deef087f5192368c0c8d4f4abf7fc5177548fddf0f6a6a8a7973eca096aed87209_1"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}